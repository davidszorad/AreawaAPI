// <auto-generated />
using System;
using Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.Database.Migrations
{
    [DbContext(typeof(AreawaDbContext))]
    partial class AreawaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("areawa")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Database.Entities.ArchiveType", b =>
                {
                    b.Property<int>("ArchiveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ArchiveTypeId");

                    b.ToTable("ArchiveType", "areawa");
                });

            modelBuilder.Entity("Core.Database.Entities.EntityStatus", b =>
                {
                    b.Property<int>("EntityStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EntityStatusId");

                    b.ToTable("EntityStatus", "areawa");
                });

            modelBuilder.Entity("Core.Database.Entities.WebsiteArchive", b =>
                {
                    b.Property<long>("WebsiteArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArchiveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ArchiveUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WebsiteArchiveId");

                    b.HasIndex("ArchiveTypeId");

                    b.HasIndex("EntityStatusId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("ShortId")
                        .IsUnique();

                    b.ToTable("WebsiteArchive", "areawa");
                });

            modelBuilder.Entity("Core.Database.Entities.WebsiteArchive", b =>
                {
                    b.HasOne("Core.Database.Entities.ArchiveType", "ArchiveType")
                        .WithMany("WebsiteArchives")
                        .HasForeignKey("ArchiveTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Database.Entities.EntityStatus", "EntityStatus")
                        .WithMany("WebsiteArchives")
                        .HasForeignKey("EntityStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchiveType");

                    b.Navigation("EntityStatus");
                });

            modelBuilder.Entity("Core.Database.Entities.ArchiveType", b =>
                {
                    b.Navigation("WebsiteArchives");
                });

            modelBuilder.Entity("Core.Database.Entities.EntityStatus", b =>
                {
                    b.Navigation("WebsiteArchives");
                });
#pragma warning restore 612, 618
        }
    }
}
